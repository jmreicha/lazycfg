name: Pull Request

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

permissions:
  pull-requests: write

jobs:
  description:
    name: Description
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body?.trim() || "";

            // Add debugging to see what's in the PR body
            console.log('PR Body:', prBody);

            const placeholderRegex = /^###\s*Description of intended changes\s*[\r\n]+###\s*Links to related Jira tickets or other references\s*$/i;

            // Debug regex match result
            const isPlaceholder = placeholderRegex.test(prBody);
            console.log('PR body matches placeholder regex:', isPlaceholder);

            let message = null;

            // Capture common parts of messages
            const commonContent = [
              "",
              "- A clear explanation of **why** the changes are needed and any relevant Jira tickets or references",
              "",
              "This helps reviewers understand the purpose of the change and is required before this PR can be merged."
            ].join("\n");

            // Check if the PR body is empty or hasn't been updated
            if (prBody === "") {
              console.log('PR body is empty');
              message = "ðŸš« **Description Is Missing**\n\nThis pull request does not include a description. Please add:" + commonContent;
            } else if (isPlaceholder) {
              console.log('PR body contains placeholder template');
              message = "ðŸš« **Placeholder Description Detected**\n\nYour PR description still contains the default template. Please update it with:" + commonContent;
            } else {
              console.log('PR body passed validation checks');
            }

            if (message) {
              console.log('Posting comment due to invalid PR description');

              try {
                // Unique signature to identify our bot comments
                const BOT_SIGNATURE = "<!-- PR-Description-Validator -->";
                message = message + "\n\n" + BOT_SIGNATURE;

                // First check for existing comments from this workflow
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                });

                // Find any previous comments from our bot
                const botComments = comments.filter(comment =>
                  comment.body && comment.body.includes(BOT_SIGNATURE)
                );

                // Delete any existing bot comments
                if (botComments.length > 0) {
                  console.log(`Found ${botComments.length} previous bot comments. Deleting...`);
                  for (const comment of botComments) {
                    await github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id
                    });
                    console.log(`Deleted comment ID: ${comment.id}`);
                  }
                }

                // Post the new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: message
                });

                console.log('Comment posted successfully');

                // Fail the job to block merging
                core.setFailed("PR description is invalid (missing or placeholder text).");

                // For github-script, we need to throw an error to ensure the job fails
                throw new Error("PR description is invalid (missing or placeholder text).");
              } catch (error) {
                console.error('Error occurred:', error);
                core.setFailed(`Error: ${error.message}`);
                throw error;
              }
            } else {
              // Clean up any existing comments if validation now passes
              try {
                // Unique signature to identify our bot comments
                const BOT_SIGNATURE = "<!-- PR-Description-Validator -->";

                // Check for existing comments from this workflow
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                });

                // Find any previous comments from our bot
                const botComments = comments.filter(comment =>
                  comment.body && comment.body.includes(BOT_SIGNATURE)
                );

                // Delete any existing bot comments since validation now passes
                if (botComments.length > 0) {
                  console.log(`Found ${botComments.length} previous bot comments. Cleaning up...`);
                  for (const comment of botComments) {
                    await github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id
                    });
                    console.log(`Deleted comment ID: ${comment.id}`);
                  }
                }

                console.log('PR description is valid, continuing...');
              } catch (error) {
                console.error('Error cleaning up comments:', error);
              }
            }
