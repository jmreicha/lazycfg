package generate

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/jmreicha/lazycfg/internal/cmd/util"
	"github.com/lithammer/dedent"
)

var (
	// Paths
	Home               = os.Getenv("HOME")
	AwsConfigPath      = Home + "/.aws/config"
	GrantedConfigPath  = Home + "/.granted/config"
	KubeConfigPath     = Home + "/.kube/config"
	SteamipeConfigPath = Home + "/.steampipe/config/aws.spc"
)

// CreateGrantedConfiguration creates a configuration file for Granted.
// It returns an error if the file operation fails.
func CreateGrantedConfiguration(config string) error {
	util.CheckCmd("granted")

	if err := util.BackupConfig(config); err != nil {
		return err
	}

	// Ensure the directory structure exists
	dir := filepath.Dir(config)
	if err := os.MkdirAll(dir, 0750); err != nil {
		return fmt.Errorf("failed to create directories: %w", err)
	}

	file, err := os.Create(filepath.Clean(config))
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer file.Close()

	configContent := dedent.Dedent(`
		DefaultBrowser = "STDOUT"
		CustomBrowserPath = ""
		CustomSSOBrowserPath = ""
		Ordering = ""
		ExportCredentialSuffix = ""
		DisableUsageTips = true
		CredentialProcessAutoLogin = true
	`)
	configContent = strings.TrimSpace(configContent)

	_, writeErr := file.WriteString(configContent)
	if writeErr != nil {
		return fmt.Errorf("failed to write to file: %w", writeErr)
	} else {
		println("Configuration file created successfully " + "'" + config + "'")
	}

	return nil
}

// CreateSteampipeConfiguration creates a configuration file for Steampipe.
// It returns an error if the file operation fails.
func CreateSteampipeConfiguration(config string) error {
	util.CheckCmd("steampipe")

	// Check if AwsConfigPath exists first, as it is required for Steampipe configuration
	if _, err := os.Stat(AwsConfigPath); os.IsNotExist(err) {
		return fmt.Errorf("AWS configuration file not found at %q", AwsConfigPath)
	}

	if err := util.BackupConfig(config); err != nil {
		return err
	}

	// Ensure the directory structure exists
	dir := filepath.Dir(config)
	if err := os.MkdirAll(dir, 0750); err != nil {
		return fmt.Errorf("failed to create directories: %w", err)
	}

	file, err := os.Create(filepath.Clean(config))
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer file.Close()

	configContent := dedent.Dedent(`
		# This config file is auto-generated by lazycfg, do not edit

		connection "aws_all" {
			plugin      = "aws"
			type        = "aggregator"
			connections = ["aws_*"]
		}
	`)
	configContent = strings.TrimSpace(configContent)

	_, writeErr := file.WriteString(configContent)
	if writeErr != nil {
		return fmt.Errorf("failed to write to file: %w", writeErr)
	} else {
		println("Configuration file created successfully " + "'" + config + "'")
	}

	return nil
}
